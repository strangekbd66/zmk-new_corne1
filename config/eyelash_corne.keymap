#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <interfaces/hid-trackball.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_CONTROL>, <&caps_word>;

            label = "LCTRL - CAPSWORD";
        };

        td1: td1 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_ALT>, <&kp ENTER>, <&kp LC(LS(ENTER))>;

            label = "alt-enter-ctrlshenter";
        };

        td2: td2 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_GUI>, <&kp LG(C)>;

            label = "gui-copilot";
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    combos {
        compatible = "zmk,combos";

        escape {
            bindings = <&kp ESC>;
            key-positions = <0 1>;
        };

        redo {
            bindings = <&kp LC(Y)>;
            key-positions = <29 30>;
        };

        gui-copilot {
            bindings = <&td2>;
            key-positions = <42 43>;
        };

        ctrltab {
            bindings = <&kp LC(TAB)>;
            key-positions = <2 3 1>;
        };

        ctrshtab {
            bindings = <&kp LC(LS(TAB))>;
            key-positions = <1 2>;
        };

        left_monitor {
            bindings = <&kp LG(LS(LEFT))>;
            key-positions = <13 14 15>;
        };

        right_monitor {
            bindings = <&kp LG(LS(RIGHT))>;
            key-positions = <16 17 18>;
        };

        gui_up {
            bindings = <&kp LG(UP_ARROW)>;
            key-positions = <2 3>;
        };

        gui_down {
            bindings = <&kp LG(DOWN)>;
            key-positions = <15 16>;
        };

        gui_left {
            bindings = <&kp LG(LEFT_ARROW)>;
            key-positions = <15 14>;
        };

        gui_right {
            bindings = <&kp LG(RIGHT)>;
            key-positions = <17 16>;
        };

        snipping_tool {
            bindings = <&kp LG(LS(S))>;
            key-positions = <17 14>;
        };

        notifications {
            bindings = <&kp LG(N)>;
            key-positions = <17 13>;
        };
    };

    macros {
        new_macro: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LS(F) &kp O &kp R &kp SPACE &kp LS(R) &kp LS(O) &kp SPACE &kp I &kp S &kp S &kp U &kp A &kp N &kp C &kp E &kp SPACE &kp P &kp L &kp E &kp A &kp S &kp E &kp COMMA &kp SPACE &kp K &kp I &kp N &kp D &kp L &kp Y &kp SPACE &kp R &kp E &kp F &kp E &kp R &kp SPACE &kp T &kp O &kp SPACE &kp T &kp H &kp E &kp SPACE &kp L &kp I &kp S &kp T &kp SPACE &kp O &kp F &kp SPACE &kp R &kp E &kp Q &kp U &kp I &kp R &kp E &kp D &kp SPACE &kp M &kp A &kp T &kp E &kp R &kp I &kp A &kp L &kp S &kp SPACE &kp P &kp R &kp O &kp V &kp I &kp D &kp E &kp D &kp SPACE &kp B &kp E &kp L &kp O &kp W &kp COMMA>;
            label = "ForRO";
        };

        new_macro1: new_macro1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LS(A) &kp C &kp K &kp N &kp O &kp W &kp L &kp E &kp D &kp G &kp E &kp D &kp SPACE &kp O &kp N &kp SPACE &kp T &kp H &kp I &kp S &kp DOT &kp SPACE &kp LS(W) &kp E &kp SPACE &kp W &kp I &kp L &kp L &kp SPACE &kp L &kp I &kp N &kp E &kp SPACE &kp U &kp P &kp SPACE &kp D &kp I &kp S &kp P &kp A &kp T &kp C &kp H &kp SPACE &kp O &kp N &kp C &kp E &kp SPACE &kp W &kp I &kp T &kp H &kp SPACE &kp A &kp V &kp A &kp I &kp L &kp A &kp B &kp L &kp E &kp SPACE &kp LS(F) &kp LS(R) &kp DOT>;
            label = "FRlineup";
        };

        new_macro2: new_macro2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LS(E) &kp N &kp D &kp O &kp R &kp S &kp I &kp N &kp G &kp SPACE &kp T &kp H &kp I &kp S &kp SPACE &kp P &kp R &kp O &kp J &kp E &kp C &kp T &kp SPACE &kp F &kp O &kp R &kp SPACE &kp LS(P) &kp N0 &kp SPACE &kp H &kp A &kp N &kp D &kp L &kp I &kp N &kp G &kp SPACE &kp P &kp L &kp E &kp A &kp S &kp E &kp DOT>;
            label = "P0";
        };

        new_macro3: new_macro3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LS(E) &kp N &kp D &kp O &kp R &kp S &kp I &kp N &kp G &kp SPACE &kp T &kp H &kp I &kp S &kp SPACE &kp P &kp R &kp O &kp J &kp E &kp C &kp T &kp SPACE &kp F &kp O &kp R &kp SPACE &kp LS(P) &kp N1 &kp SPACE &kp H &kp A &kp N &kp D &kp L &kp I &kp N &kp G &kp SPACE &kp P &kp L &kp E &kp A &kp S &kp E &kp DOT>;
            label = "P1";
        };

        new_macro4: new_macro4 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LS(S) &kp H &kp A &kp R &kp I &kp N &kp G &kp SPACE &kp C &kp O &kp M &kp P &kp L &kp E &kp T &kp I &kp O &kp N &kp SPACE &kp R &kp E &kp M &kp A &kp R &kp K &kp S &kp SPACE &kp F &kp R &kp O &kp M &kp SPACE &kp LS(F) &kp LS(R) &kp SPACE &kp B &kp E &kp L &kp O &kp W &kp COMMA &kp RET &kp RET &kp LS(A) &kp C &kp T &kp I &kp O &kp N &kp SPACE &kp LS(T) &kp A &kp K &kp E &kp N &kp COLON &kp SPACE &kp RET &kp RET &kp LS(M) &kp A &kp T &kp E &kp R &kp I &kp A &kp L &kp S &kp SPACE &kp LS(U) &kp S &kp E &kp D &kp COLON &kp RET &kp RET &kp LS(F) &kp A &kp C &kp I &kp L &kp I &kp T &kp Y &kp SPACE &kp LS(U) &kp S &kp E &kp D &kp COLON &kp RET &kp RET &kp LS(A) &kp S &kp S &kp I &kp G &kp N &kp E &kp D &kp SPACE &kp LS(F) &kp LS(R) &kp COLON>;
            label = "FRcomplete";
        };

        new_macro5: new_macro5 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp N1 &kp X &kp SPACE &kp LS(P) &kp R &kp O &kp L &kp I &kp N &kp K &kp SPACE &kp LS(M) &kp O &kp D &kp E &kp M &kp RET &kp N1 &kp X &kp SPACE &kp LS(T) &kp E &kp L &kp S &kp E &kp T &kp SPACE &kp RET &kp N1 &kp X &kp SPACE &kp LS(C) &kp LS(B) &kp LS(K)>;
            label = "copperbundlemats";
        };

        new_macro6: new_macro6 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp N1 &kp X &kp SPACE &kp LS(O) &kp LS(N) &kp LS(U) &kp SPACE &kp M &kp O &kp D &kp E &kp M &kp RET &kp N1 &kp X &kp SPACE &kp LS(T) &kp E &kp L &kp S &kp E &kp T &kp SPACE &kp RET &kp N1 &kp X &kp SPACE &kp LS(I) &kp LS(O) &kp LS(O) &kp RET &kp N1 &kp X &kp SPACE &kp P &kp A &kp T &kp C &kp H &kp SPACE &kp C &kp O &kp R &kp D &kp SPACE &kp RET &kp N4 &kp X &kp SPACE &kp LS(S) &kp LS(C) &kp SPACE &kp C &kp O &kp N &kp N &kp E &kp C &kp T &kp O &kp R>;
            label = "NEW_MACRO6";
        };

        new_macro7: new_macro7 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LS(M) &kp LS(O) &kp LS(A) &kp SPACE &kp LS(F) &kp LS(T) &kp LS(T) &kp LS(X) &kp RET &kp N1 &kp X &kp SPACE &kp LS(O) &kp LS(N) &kp LS(U) &kp SPACE &kp M &kp O &kp D &kp E &kp M &kp RET &kp N1 &kp X &kp SPACE &kp LS(T) &kp E &kp L &kp S &kp E &kp T &kp SPACE &kp RET &kp N1 &kp X &kp SPACE &kp LS(I) &kp LS(O) &kp LS(O) &kp RET &kp N1 &kp X &kp SPACE &kp LS(S) &kp LS(C) &kp MINUS &kp LS(S) &kp LS(C) &kp P &kp A &kp T &kp C &kp H &kp SPACE &kp C &kp O &kp R &kp D &kp SPACE &kp RET &kp N1 &kp X &kp SPACE &kp LS(L) &kp LS(C) &kp MINUS &kp LS(S) &kp LS(C) &kp P &kp A &kp T &kp C &kp H &kp SPACE &kp C &kp O &kp R &kp D &kp SPACE &kp RET &kp N3 &kp X &kp SPACE &kp LS(S) &kp LS(C) &kp SPACE &kp C &kp O &kp N &kp N &kp E &kp C &kp T &kp O &kp R>;
            label = "MOAFTTXbundle";
        };

        new_macro8: new_macro8 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LS(A) &kp C &kp K &kp N &kp O &kp W &kp L &kp E &kp D &kp G &kp E &kp D &kp SPACE &kp O &kp N &kp SPACE &kp T &kp H &kp I &kp S &kp COMMA &kp SPACE &kp LS(P) &kp L &kp E &kp A &kp S &kp E &kp SPACE &kp S &kp E &kp E &kp SPACE &kp A &kp T &kp T &kp A &kp C &kp H &kp E &kp D &kp SPACE &kp F &kp I &kp L &kp E &kp SPACE &kp F &kp O &kp R &kp SPACE &kp P &kp R &kp O &kp C &kp E &kp S &kp S &kp I &kp N &kp G &kp SPACE &kp O &kp F &kp SPACE &kp W &kp O &kp R &kp K &kp SPACE &kp P &kp E &kp R &kp M &kp I &kp T &kp DOT>;
            label = "Forpermit";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "default_layer";
            bindings = <
&kp TAB                   &kp Q  &kp W  &kp E  &kp R            &kp T                               &kp UP                    &kp Y                  &kp U            &kp I      &kp O    &kp P     &kp BACKSPACE
&mt LSHFT CAPS            &kp A  &kp S  &kp D  &kp F            &kp G                     &kp LEFT  &tb_tg_scroll  &kp RIGHT  &kp H                  &kp J            &kp K      &kp L    &kp SEMI  &kp SQT
&mt LEFT_CONTROL LA(TAB)  &kp Z  &kp X  &kp C  &kp V            &kp B        &kp LG(L)              &kp DOWN                  &kp N                  &kp M            &kp COMMA  &kp DOT  &kp FSLH  &kp RIGHT_SHIFT
                                        &td1   &lt 2 BACKSPACE  &lt 1 SPACE                                                   &mt RIGHT_SHIFT SPACE  &lt 1 BACKSPACE  &kp ENTER
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        NAV {
            bindings = <
&trans  &trans  &kp HOME        &kp UP_ARROW     &kp END         &kp P                               &rgb_ug RGB_TOG              &kp PLUS      &mkp LCLK       &mmv MOVE_UP    &mkp RCLK        &kp N0     &kp MINUS
&trans  &trans  &kp LEFT        &kp DOWN         &kp RIGHT       &kp O                   &bt BT_PRV  &trans           &bt BT_NXT  &kp ASTERISK  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &kp EQUAL  &kp LBKT
&trans  &trans  &msc SCRL_LEFT  &msc SCRL_RIGHT  &msc SCRL_DOWN  &msc SCRL_UP  &trans                &bt BT_CLR                   &kp PERIOD    &kp N1          &kp N2          &kp N3           &kp FSLH   &kp RBKT
                                &trans           &trans          &trans                                                           &trans        &trans          &trans
            >;

            sensor-bindings = <&rgb_encoder>;
            label = "1";
        };

        num_left {
            display-name = "num_left";
            bindings = <
&kp COLON                     &kp ASTERISK  &kp N7  &kp N8     &kp N9        &kp PLUS                                      &kp UP                    &bt BT_CLR_ALL         &bt BT_NXT       &rgb_ug RGB_TOG  &rgb_ug RGB_EFR  &rgb_ug RGB_EFF                 &out OUT_TOG
&kp ESCAPE                    &kp SLASH     &kp N4  &kp N5     &kp N6        &kp MINUS                           &kp LEFT  &tb_tg_scroll  &kp RIGHT  &rgb_ug RGB_BRI        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_COLOR_HSB(0,88,50)  &kp SQT
&mt LA(LC(LEFT_SHIFT)) GRAVE  &kp NUMBER_0  &kp N1  &kp N2     &kp N3        &kp EQUAL             &caps_word              &kp DOWN                  &rgb_ug RGB_BRD        &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &kp FSLH                        &mt RIGHT_GUI BACKSLASH
                                                    &kp LCTRL  &lt 1 DELETE  &mt LEFT_SHIFT ENTER                                                    &mt RIGHT_SHIFT SPACE  &lt 1 BACKSPACE  &kp RIGHT_ALT
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
            label = "num_left";
        };

        num-sym-fn {
            bindings = <
&kp TILDE  &kp EXCLAMATION  &kp AT_SIGN  &kp HASH  &kp DOLLAR  &kp PERCENT                    &trans          &kp CARET  &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp UNDERSCORE
&kp GRAVE  &kp N1           &kp N2       &kp N3    &kp N4      &kp N5                 &trans  &trans  &trans  &kp N6     &kp N7         &kp N8        &kp N9                &kp N0                 &kp MINUS
&kp F1     &kp F2           &kp F3       &kp F4    &kp F5      &kp F6       &trans            &trans          &kp F7     &kp F8         &kp F9        &kp F10               &kp F11                &kp F12
                                         &trans    &trans      &trans                                         &trans     &trans         &trans
            >;

            label = "num-sym-fn";
        };

        layer_4 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans          &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans                                    &trans  &trans  &trans
            >;
        };
    };
};
